<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UnbehandeltesXMLObjekt" xml:space="preserve">
    <value>unhandled XML-object '{0}'</value>
  </data>
  <data name="en" xml:space="preserve">
    <value>no root-node attached to xml-editor.</value>
  </data>
  <data name="AnDieserStelleKeineTagsErlaubt" xml:space="preserve">
    <value>Here no tags are allowed.  Maybe the problem is that the parent tag is incorrect. </value>
  </data>
  <data name="ElementNameKannNichtAbgerufenWerden" xml:space="preserve">
    <value>The element name for DTDChildElemente can be only called up, if the ChildElementBlock is ' EinzelChild '.\n\n(affected code:'{0} ', recognized:{1}) </value>
  </data>
  <data name="ErhaltenerNodeistkeinTextnode" xml:space="preserve">
    <value>Received node is not a textnode  ({0})</value>
  </data>
  <data name="ErlaubteTags" xml:space="preserve">
    <value>Allowed tags:</value>
  </data>
  <data name="FuerRootElementKeinTestmuster" xml:space="preserve">
    <value>For the root element no test sample can be provided.  Its validity must be ensured by comparison with the DTD root element. </value>
  </data>
  <data name="KeineAttributeInAttributListe" xml:space="preserve">
    <value>No attributes found in attribute-list '{0}'!</value>
  </data>
  <data name="KeinInhaltImEntityCode" xml:space="preserve">
    <value>No content found in entitysourcecode '{0}'.</value>
  </data>
  <data name="KeinNameImEntityCode" xml:space="preserve">
    <value>No name found in entitysourcecode '{0}'.</value>
  </data>
  <data name="KeinNameInElementcodegefunden" xml:space="preserve">
    <value>No name found in elementcode '{0}'.</value>
  </data>
  <data name="KeinNodeNameAngegeben" xml:space="preserve">
    <value>No Nodename was indicated  (xml.InsertNewElementAnCursorPos)</value>
  </data>
  <data name="KonnteDateiNichtEinlesen" xml:space="preserve">
    <value>CanÂ´t read file '{0}':\n{1}</value>
  </data>
  <data name="MehrAlsEinsImElementCodeGefunden" xml:space="preserve">
    <value>Found more then one element in elementcode '{0}'.</value>
  </data>
  <data name="MehrAlsEinsImEntityQuellCode" xml:space="preserve">
    <value>Found more then one entity in entitysourcecode '{0}'.</value>
  </data>
  <data name="NichtsImElementCodeGefunden" xml:space="preserve">
    <value>No element found in elementcode '{0}'.</value>
  </data>
  <data name="NichtsImEntityCode" xml:space="preserve">
    <value>No entity found in entitysourcecode '{0}'</value>
  </data>
  <data name="StringIstKeinOperator" xml:space="preserve">
    <value>The string '{0}' is no operator!</value>
  </data>
  <data name="TagHierNichtErlaubt" xml:space="preserve">
    <value>Tag '{0}' not allowed here: </value>
  </data>
  <data name="UnbekannteAttributAnzahl" xml:space="preserve">
    <value>Unknown attribute-countl '{0}' in attribut '{1}' of  element {2}</value>
  </data>
  <data name="UnbekannteDTDChildElementAnzahl" xml:space="preserve">
    <value>unknown DTDChildElementAnzahl: {0}</value>
  </data>
  <data name="UnbekannteDTDChildElementArt" xml:space="preserve">
    <value>unknown DTDChildElementArt {0}</value>
  </data>
  <data name="UnbekanntesElement" xml:space="preserve">
    <value>Unknown element '{0}'</value>
  </data>
  <data name="QuellcodeFehleranzeige" xml:space="preserve">
    <value>sourcecode error details</value>
  </data>
  <data name="FehlerBeimLesenDesDTDELementes" xml:space="preserve">
    <value>Error reading dtd-element '{0}':{1}</value>
  </data>
  <data name="AktionAttributGeloescht" xml:space="preserve">
    <value>remove attribute '{0}' from node '{1}'</value>
  </data>
  <data name="AktionAttributValueGeaendert" xml:space="preserve">
    <value>change value of attribute '{0}' in node '{1}' to '{2}'</value>
  </data>
  <data name="AktionEinfuegen" xml:space="preserve">
    <value>paste from clipboard</value>
  </data>
  <data name="AktionInsertNode" xml:space="preserve">
    <value>insert node '{0}'</value>
  </data>
  <data name="AktionLoeschen" xml:space="preserve">
    <value>delete</value>
  </data>
  <data name="AktionSchreiben" xml:space="preserve">
    <value>write '{0}'</value>
  </data>
  <data name="ButtonAusschneiden" xml:space="preserve">
    <value>cut</value>
  </data>
  <data name="ButtonEinfuegen" xml:space="preserve">
    <value>paste</value>
  </data>
  <data name="ButtonHome" xml:space="preserve">
    <value>home</value>
  </data>
  <data name="ButtonKopieren" xml:space="preserve">
    <value>copy</value>
  </data>
  <data name="ButtonLoeschen" xml:space="preserve">
    <value>delete</value>
  </data>
  <data name="ButtonRedo" xml:space="preserve">
    <value>redo</value>
  </data>
  <data name="ButtonUndo" xml:space="preserve">
    <value>undo</value>
  </data>
  <data name="KeinUndoSchrittVerfuegbar" xml:space="preserve">
    <value>no undo available</value>
  </data>
  <data name="NameUndoSchritt" xml:space="preserve">
    <value>undo '{0}'</value>
  </data>
  <data name="RootNodedurchZwischenablageersetzen" xml:space="preserve">
    <value>replace root node with clipboard</value>
  </data>
  <data name="NochKeinRootNodeZugewiesen" xml:space="preserve">
    <value>No root-node attached</value>
  </data>
  <data name="toolStripButtonAktualisieren" xml:space="preserve">
    <value>refresh</value>
  </data>
</root>