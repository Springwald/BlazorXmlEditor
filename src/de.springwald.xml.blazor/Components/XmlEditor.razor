@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using de.springwald.xml.blazor
@using de.springwald.xml.blazor.NativePlatform
@using de.springwald.xml.editor
@using editor.nativeplatform.gfx
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="card">
    <div class="card-body">
        <div tabindex="0"
             @onmousedown="EventOnMouseDown" @onmousemove="EventOnMouseMove" @onmouseup="EventOnMouseUp"
             @onkeydown="EventOnKeyDown"
             @ref="_canvasDivReference">
            <BECanvas Width="700" Height="500" @ref="_canvasReference">
            </BECanvas>
        </div>
    </div>
</div>

@code {

    private bool initDone;
    private XmlEditorContext _editorContext;
    public de.springwald.xml.editor.XMLEditor Editor;
    protected BECanvasComponent _canvasReference;
    protected ElementReference _canvasDivReference;
    protected BlazorNativePlatform nativePlattform;

    [Parameter]
    public XmlEditorContext EditorContext
    {
        set
        {
            this._editorContext = value;
            if (value != null && this.nativePlattform != null) this.Init();
        }
        get
        {
            return this._editorContext;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.nativePlattform = new BlazorNativePlatform(_canvasReference);
            await this.nativePlattform.SetSize(700, 500 - 10);
            if (this.EditorContext != null) this.Init();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void Init()
    {
        if (this.initDone) return;
        this.initDone = true;

        var config = new EditorConfig
        {
            NodeNameFont = new Font(names: new[] { "Verdana", "Geneva", "sans-serif" }, height: 13, graphicsUnit: Font.GraphicsUnit.Pixel, monospace: false),
            NodeAttributeFont = new Font(names: new[] { "Verdana", "Geneva", "sans-serif" }, height: 12, graphicsUnit: Font.GraphicsUnit.Pixel, monospace: false),
            TextNodeFont = new Font(names: new[] { "Lucida Console", "Monaco", "monospace" }, height: 14, graphicsUnit: Font.GraphicsUnit.Pixel, monospace: true)
        };

        this.Editor = new XMLEditor(this._editorContext.XmlRules, nativePlattform, config);

        this._editorContext.RootNodeChanged.Add(this.RootNodeChanged);
    }

    public void Dispose()
    {
        this._editorContext?.RootNodeChanged.Remove(this.RootNodeChanged);
    }

    private async Task RootNodeChanged(System.Xml.XmlNode rootNode)
    {
        await this.Editor.SetRootNode(rootNode);
    }

    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    #region key events

    public async void EventOnKeyDown(KeyboardEventArgs e)
    {
        var args = new de.springwald.xml.events.KeyEventArgs
        {
            CtrlKey = e.CtrlKey,
            AltKey = e.AltKey,
            ShiftKey = e.ShiftKey,
            Content = e.Key,
            Key = events.Keys.undefined
        };

        switch (e.Code)
        {
            case "KeyA": args.Key = events.Keys.A; break;
            case "KeyC": args.Key = events.Keys.C; break;
            case "KeyS": args.Key = events.Keys.S; break;
            case "KeyV": args.Key = events.Keys.V; break;
            case "KeyX": args.Key = events.Keys.X; break;
            case "KeyZ": args.Key = events.Keys.Z; break;

            case "Backspace": args.Key = events.Keys.Back; break;
            case "Delete": args.Key = events.Keys.Delete; break;
            case "Enter": args.Key = events.Keys.Enter; break;
            case "Escape": args.Key = events.Keys.Escape; break;
            case "Home": args.Key = events.Keys.Home; break;

            case "ArrowLeft": args.Key = events.Keys.Left; break;
            case "ArrowRight": args.Key = events.Keys.Right; break;

            case "Tab": args.Key = events.Keys.Tab; break;

            case "Control":
            case "ShiftLeft":
            case "ShiftRight":
            case "AltLeft":
            case "AltRight":
                // skip this keydowns
                return;
        }

        await this.nativePlattform.InputEvents.PreviewKey.Trigger(args);
    }

    #endregion

    #region mouse events

    async void EventOnMouseDown(MouseEventArgs e)
    {
        var result = await JSRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", new object[] { this._canvasDivReference });

        var x = (int)(e.ClientX - result.Left);
        var y = (int)(e.ClientY - result.Top);

        await this.nativePlattform.InputEvents.MouseDown.Trigger(new de.springwald.xml.events.MouseEventArgs
        {
            X = x,
            Y = y
        });
    }

    async void EventOnMouseMove(MouseEventArgs e)
    {
        var result = await JSRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", new object[] { this._canvasDivReference });

        var x = (int)(e.ClientX - result.Left);
        var y = (int)(e.ClientY - result.Top);

        await this.nativePlattform.InputEvents.MouseMove.Trigger(new de.springwald.xml.events.MouseEventArgs
        {
            X = x,
            Y = y
        });
    }

    async void EventOnMouseUp(MouseEventArgs e)
    {
        var result = await JSRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", new object[] { this._canvasDivReference });

        var x = (int)(e.ClientX - result.Left);
        var y = (int)(e.ClientY - result.Top);

        await this.nativePlattform.InputEvents.MouseUp.Trigger(new de.springwald.xml.events.MouseEventArgs
        {
            X = x,
            Y = y
        });
    }

    #endregion
}
