@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using de.springwald.xml.blazor
@using de.springwald.xml.blazor.NativePlatform
@using de.springwald.xml.editor
@using editor.nativeplatform.gfx
@using Microsoft.JSInterop;
@using de.springwald.xml.blazor.Code;
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (this.showContextMenu)
{
    <div>Right click menu</div>
}

<div class="card">
    <div class="card-body">
        <div tabindex="0" class="canvasOuter"
             @onmousedown="EventOnMouseDown" @onmousemove="EventOnMouseMove" @onmouseup="EventOnMouseUp"
             @oncontextmenu="HandleRightClick" @oncontextmenu:preventDefault="true"
             @onkeydown="EventOnKeyDown" @onkeydown:preventDefault
             @ref="_canvasDivReference">
            <BECanvas Width="@canvasWidth" Height="@canvasHeight" @ref="_canvasReference">
            </BECanvas>
        </div>
    </div>
</div>

@code {

    private bool showContextMenu;

    protected BECanvasComponent _canvasReference;
    protected ElementReference _canvasDivReference;

    protected int canvasWidth;
    protected int canvasHeight;

    public de.springwald.xml.editor.XMLEditor Editor;

    [Parameter]
    public EditorContext EditorContext { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.Init();
            await JSRuntime.InvokeVoidAsync("browserResize.registerResizeCallback");
            BrowserResize.OnResize += this.Resized;
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Init()
    {
        this.EditorContext.NativePlatform = new BlazorNativePlatform(_canvasReference);
        this.Editor = new XMLEditor(this.EditorContext);
        this.EditorContext.EditorStatus.RootNodeChanged.Add(this.RootNodeChanged);
        await this.EditorContext.EditorIsReady.Trigger(EventArgs.Empty);
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        BrowserResize.OnResize -= this.Resized;
        this.EditorContext?.EditorStatus.RootNodeChanged.Remove(this.RootNodeChanged);
        this.Editor.Dispose();
    }

    private async Task RootNodeChanged(System.Xml.XmlNode rootNode)
    {
        await this.Editor.SetRootNode(rootNode);
        await this.Resized();
        StateHasChanged();
    }

    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    private async Task Resized()
    {
        var size = await JSRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", new object[] { this._canvasDivReference });
        if (size == null) return;
        if (size.Width != this.canvasWidth || size.Height != this.canvasHeight)
        {
            this.canvasWidth = (int)size.Width;
            this.canvasHeight = (int)size.Height;
            await this.EditorContext.NativePlatform.SetSize(this.canvasWidth, this.canvasHeight - 10);
            this.Editor.SizeHasChanged();
            this.StateHasChanged();
        }
    }

    #region key events

    public async void EventOnKeyDown(KeyboardEventArgs e)
    {
        var args = new de.springwald.xml.events.KeyEventArgs
        {
            CtrlKey = e.CtrlKey,
            AltKey = e.AltKey,
            ShiftKey = e.ShiftKey,
            Content = e.Key,
            Key = events.Keys.undefined
        };

        switch (e.Key)
        {
            // check control keys here to prevent checking ControlLeft vs. ControlRight etc.

            case "Control":
            case "Shift":
            case "Alt":
                // skip this keydowns
                return;

            case "Home": args.Key = events.Keys.Home; break;
            case "Enter": args.Key = events.Keys.Enter; break;

            default:

                // check other keys in detail by key code

                switch (e.Code)
                {
                    case "KeyA": args.Key = events.Keys.A; break;
                    case "KeyC": args.Key = events.Keys.C; break;
                    case "KeyS": args.Key = events.Keys.S; break;
                    case "KeyV": args.Key = events.Keys.V; break;
                    case "KeyX": args.Key = events.Keys.X; break;
                    case "KeyY": args.Key = events.Keys.Y; break;
                    case "KeyZ": args.Key = events.Keys.Z; break;

                    case "Backspace": args.Key = events.Keys.Back; break;
                    case "Delete": args.Key = events.Keys.Delete; break;
                    case "Escape": args.Key = events.Keys.Escape; break;

                    case "ArrowLeft": args.Key = events.Keys.Left; break;
                    case "ArrowRight": args.Key = events.Keys.Right; break;

                    case "Tab":
                        args.Key = events.Keys.Tab;
                        break;
                }
                break;
        }

        await this.EditorContext.NativePlatform.InputEvents.PreviewKey.Trigger(args);
    }

    #endregion

    #region mouse events

    async void EventOnMouseDown(MouseEventArgs e)
    {
        var result = await JSRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", new object[] { this._canvasDivReference });

        var x = (int)(e.ClientX - result.Left);
        var y = (int)(e.ClientY - result.Top);

        await this.EditorContext.NativePlatform.InputEvents.MouseDown.Trigger(new de.springwald.xml.events.MouseEventArgs
        {
            X = x,
            Y = y
        });
    }

    async void EventOnMouseMove(MouseEventArgs e)
    {
        var result = await JSRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", new object[] { this._canvasDivReference });

        var x = (int)(e.ClientX - result.Left);
        var y = (int)(e.ClientY - result.Top);

        await this.EditorContext.NativePlatform.InputEvents.MouseMove.Trigger(new de.springwald.xml.events.MouseEventArgs
        {
            X = x,
            Y = y
        });
    }

    async void EventOnMouseUp(MouseEventArgs e)
    {
        var result = await JSRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", new object[] { this._canvasDivReference });

        var x = (int)(e.ClientX - result.Left);
        var y = (int)(e.ClientY - result.Top);

        await this.EditorContext.NativePlatform.InputEvents.MouseUp.Trigger(new de.springwald.xml.events.MouseEventArgs
        {
            X = x,
            Y = y
        });
    }

    void HandleRightClick(MouseEventArgs args)
    {
        if (args.Button == 2) this.showContextMenu = true;
    }

    #endregion

}
