@using de.springwald.xml.rules.dtd
@using de.springwald.xml.rules
@using de.springwald.xml.editor
@using System.Linq
@implements IDisposable

@if (this.errorMessage != null)
{
    <p>Error: this.errorMessage</p>
}

<form>
    @if (this.actualNodeDtdElement != null)
    {
        @foreach (var attribut in this.actualNodeDtdElement.Attributes)
        {
            <div class="form-group row">

                @{
                    string id = new Guid().ToString();
                }

                <label for="@id" class="col-sm-2 col-form-label">@attribut.Name</label>
                <div class="col-sm-10">
                    @if (attribut.AllowedValues.Any()) //  the content comes from a predefined list of values
                    {
                        <select id="@id" class="form-control selectpicker" @onchange="(async (e) => await this.ValueSelected(attribut.Name, ((ChangeEventArgs)(e)).Value as string))">
                            @if (actualNode.Attributes[attribut.Name] == null || string.IsNullOrEmpty(actualNode.Attributes[attribut.Name]?.Value))
                            {
                                <option selected="selected">--select--</option>
                            }
                            else
                            {
                                @if (attribut.Mandatory == DtdAttribute.MandatoryTypes.Optional)
                                {
                                    <option selected="@(string.IsNullOrEmpty(actualNode.Attributes[attribut.Name]?.Value) ? true : false)" value=""></option>
                                }
                            }
                            @foreach (var value in attribut.AllowedValues)
                            {
                                <option selected="@(value == actualNode.Attributes[attribut.Name]?.Value ? true : false)">@value</option>
                            }
                        </select>
                    }
                    else  // Content is free
                    {
                        <input id="@id" class="form-control" type="text" value="@actualNode.Attributes[attribut.Name]?.Value"
                               @oninput="(async (e) => await this.ValueSelected(attribut.Name, ((ChangeEventArgs)(e)).Value as string))"
                               @onchange="(async (e) => await this.ValueSelected(attribut.Name, ((ChangeEventArgs)(e)).Value as string))" />
                    }
                </div>
            </div>
        }
    }
</form>

@code {

    [Parameter]
    public EditorContext EditorContext { get; set; }
    private EditorState EditorState => this.EditorContext?.EditorState;

    private string[] attributes;
    private System.Xml.XmlNode actualNode;
    private DtdElement actualNodeDtdElement;
    private string errorMessage;

    private async Task ValueSelected(string name, string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            (this.actualNode as System.Xml.XmlElement).RemoveAttribute(name);
        }
        else
        {
            (this.actualNode as System.Xml.XmlElement).SetAttribute(name, value);
        }
        this.StateHasChanged();
        await Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        this.EditorState.CursorRaw.ChangedEvent.Add(this.ShowAttributes);
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.EditorState.CursorRaw.ChangedEvent.Remove(this.ShowAttributes);
    }

    private async Task ShowAttributes(EventArgs eventArgs)
    {
        if ((this.EditorState != null) && (this.EditorState.RootNode != null)) //  enough data to list attributes
        {
            if (this.EditorState.CursorRaw.StartPos.Equals(this.EditorState.CursorRaw.EndPos))  //  no area selected
            {
                // Find out for which node the attributes should be displayed
                switch (this.EditorState.CursorRaw.StartPos.PosOnNode)
                {
                    case XmlCursorPos.XmlCursorPositions.CursorInsideTheEmptyNode:
                    case XmlCursorPos.XmlCursorPositions.CursorOnNodeEndTag:
                    case XmlCursorPos.XmlCursorPositions.CursorOnNodeStartTag:
                        // The node itself is selected
                        this.actualNode = this.EditorState.CursorRaw.StartPos.ActualNode;
                        break;

                    case XmlCursorPos.XmlCursorPositions.CursorInsideTextNode:
                        this.actualNode = this.EditorState.CursorRaw.StartPos.ActualNode;
                        break;

                    case XmlCursorPos.XmlCursorPositions.CursorBehindTheNode:
                    case XmlCursorPos.XmlCursorPositions.CursorInFrontOfNode:
                        // We are behind or in front of the node, so the attributes of the ParentNode are displayed
                        this.actualNode = this.EditorState.CursorRaw.StartPos.ActualNode.ParentNode;
                        break;

                    default:
                        this.actualNode = null;
                        break;
                }

                while (this.actualNode is System.Xml.XmlText) // its a text node
                {
                    this.actualNode = this.actualNode.ParentNode;   //  display the attributes of the parent node
                }

                if (this.actualNode == null)
                {
                    this.actualNodeDtdElement = null;
                }
                else
                {
                    this.actualNodeDtdElement = null;

                    // Get the DTD definitions for the current node
                    try
                    {
                        this.actualNodeDtdElement = this.EditorContext.XmlRules.Dtd.DTDElementByName(this.actualNode.Name, true);
                    }
                    catch (Dtd.XMLUnknownElementException e)
                    {
                        this.errorMessage = $"unknown element '{e.ElementName}'";
                    }
                }
            }
            StateHasChanged();
            await Task.CompletedTask;
        }
    }
}
