@using de.springwald.xml.editor
@using de.springwald.xml.editor.actions
@implements IDisposable

<div class="addAttributes">
    @foreach (var group in groups)
    {
        var elems = this.elements.Where(e => e.Group == group);
        if (elems.Any())
        {
            <div class="elementGroup">
                @if (group != null)
                {
                    <div class="title">@group.Titel</div>
                }
                @foreach (var element in elems)
                {
                    <button class="btn btn-outline-secondary btn-sm" @onclick="(async () => await this.ClickElement(element.Title))">@element.Title</button>
                }
            </div>
        }
    }
</div>

@code {

    private class Element
    {
        public string Title { get; set; }
        public XMLElementGruppe Group { get; set; }
    }

    [Parameter]
    public EditorContext EditorContext { get; set; }
    private EditorStatus EditorStatus => this.EditorContext.EditorStatus;

    private Element[] elements = new Element[] { };
    private XMLElementGruppe[] groups = new XMLElementGruppe[] { };

    protected override Task OnInitializedAsync()
    {
        this.EditorStatus.CursorRoh.ChangedEvent.Add(this.Show);
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.EditorStatus.CursorRoh.ChangedEvent.Remove(this.Show);
    }

    protected async Task ClickElement(string element)
    {
        await this.EditorContext.Actions.AktionNeuesElementAnAktCursorPosEinfuegen(element, EditorActions.UndoSnapshotSetzenOptionen.ja, neueCursorPosAufJedenFallHinterDenEingefuegtenNodeSetzen: false);
        StateHasChanged();
    }

    public async Task Show(EventArgs eventArgs)
    {
        if ((this.EditorContext.EditorStatus.RootNode != null))  //  genug Daten, um einzufügenden Elemente aufzulisten
        {
            string[] elemente = null;

            try
            {
#if CommentNichtZulassen
    bool kommentareMitAuflisten = false;
#else
                bool kommentareMitAuflisten = true;
#endif
                var elementsRaw = this.EditorContext.XmlRules.ErlaubteEinfuegeElemente_(this.EditorStatus.CursorOptimiert.StartPos, false, kommentareMitAuflisten); // die Liste der erlaubten Tags holen
                this.groups = this.EditorContext.XmlRules.ElementGruppen.Append(null).ToArray();
                this.elements = elementsRaw.Select(e => new Element { Title = e, Group = groups.Where(g => g != null && g.ContainsElement(e)).FirstOrDefault() }).ToArray();
                this.StateHasChanged();
            }
            catch (rules.dtd.DTD.XMLUnknownElementException e)
            {
                var error = $"unknown element '{e.ElementName}'";
                //Debugger.GlobalDebugger.Protokolliere(String.Format("unknown element {0} in {1}->{2}", e.ElementName, this.Name, "Aktualisieren"));  //Eines der bezogenen Elemente ist in der DTD unbekannt
                //lblFehler.Text = String.Format("unknown element '{0}'", e.ElementName);
                //lblFehler.Visible = true;
            }
            await Task.CompletedTask;
        }
    }


}
