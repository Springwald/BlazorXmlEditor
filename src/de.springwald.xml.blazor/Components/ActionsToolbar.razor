@using de.springwald.xml.editor
@using de.springwald.xml.editor.actions
@implements IDisposable

<button class="btn btn-outline-secondary btn-sm" @onclick="this.HomeClicked" title="home" disabled="@IsDisabled"><i class="fa fa-home" aria-hidden="true"></i></button>
@*<button class="btn btn-outline-secondary btn-sm" @onclick="this.RefreshClicked" title="refresh"><i class="fa fa-refresh" aria-hidden="true"></i></button>*@
<button class="btn btn-outline-secondary btn-sm" @onclick="this.UndoClicked" title="@UndoTitle" disabled="@(IsDisabled || UndoTitle == null)"><i class="fa fa-undo" aria-hidden="true"></i></button>
<button class="btn btn-outline-secondary btn-sm" @onclick="this.CopyClicked" title="copy" disabled="@(IsDisabled || !SomethingIsSelected)"><i class="fa fa-copy" aria-hidden="true"></i></button>
<button class="btn btn-outline-secondary btn-sm" @onclick="this.PasteClicked" title="paste" disabled="@(IsDisabled || !InsertPossible)"><i class="fa fa-paste" aria-hidden="true"></i></button>
<button class="btn btn-outline-secondary btn-sm" @onclick="this.CutClicked" title="cut" disabled="@(IsDisabled || !SomethingIsSelected)"><i class="fa fa-cut" aria-hidden="true"></i></button>
<button class="btn btn-outline-secondary btn-sm" @onclick="this.DeleteClicked" title="delete" disabled="@(IsDisabled || !SomethingIsSelected)"><i class="fa fa-ban" aria-hidden="true"></i></button>

@code {

    [Parameter]
    public EditorContext EditorContext
    {
        get { return this.editorContext; }
        set
        {
            this.editorContext = value;
            if (this.editorContext != null)
            {
                this.editorContext.EditorState.CursorRaw.ChangedEvent.Add(this.OnChanged);
                this.editorContext.EditorState.ContentChangedEvent.Add(this.OnChanged);
            }
            this.UpdateButtonStates();
        }
    }
    private EditorState EditorState => this.EditorContext?.EditorState;
    private EditorContext editorContext;

    private bool IsDisabled = true;
    private bool SomethingIsSelected;
    private string UndoTitle;
    private bool InsertPossible;

    protected override async void OnInitialized()
    {
        await this.UpdateButtonStates();
        base.OnInitialized();
    }

    public void Dispose()
    {
        this.editorContext?.EditorState.CursorRaw.ChangedEvent.Remove(this.OnChanged);
        this.editorContext?.EditorState.ContentChangedEvent.Remove(this.OnChanged);
    }

    private async Task OnChanged(EventArgs e)
    {
        await this.UpdateButtonStates();
        await Task.CompletedTask;
    }

    private async void HomeClicked()
    {
        await this.EditorContext.Actions.AktionCursorAufPos1();
        await Task.CompletedTask;
    }

    private async void RefreshClicked()
    {
        await Task.CompletedTask;
    }

    private async void UndoClicked()
    {
        await this.EditorContext.EditorState.UnDo();
        await Task.CompletedTask;
    }

    private async void CutClicked()
    {
        await this.EditorContext.Actions.AktionCutToClipboard(EditorActions.SetUndoSnapshotOptions.Yes);
        await Task.CompletedTask;
    }

    private async void PasteClicked()
    {
        await this.EditorContext.Actions.AktionPasteFromClipboard(EditorActions.SetUndoSnapshotOptions.Yes);
        await Task.CompletedTask;
    }

    private async void CopyClicked()
    {
        await this.EditorContext.Actions.AktionCopyToClipboard();
        await Task.CompletedTask;
    }

    private async void DeleteClicked()
    {
        await this.EditorContext.Actions.AktionDelete(EditorActions.SetUndoSnapshotOptions.Yes);
        await Task.CompletedTask;
    }

    private async Task UpdateButtonStates()
    {
        if (this.EditorState == null || this.EditorState.RootNode == null || this.EditorState.ReadOnly)
        {
            this.IsDisabled = true;
            this.UndoTitle = null;
            return;
        }
        else
        {
            this.IsDisabled = false;
        }

        this.UndoTitle = this.EditorState.UndoPossible ? this.EditorState.UndoStepName : null;

        this.InsertPossible = await this.EditorContext.NativePlatform.Clipboard.ContainsText() && this.EditorState.CursorRaw.StartPos.ActualNode != null;

        this.SomethingIsSelected = this.EditorState.IsSomethingSelected;
        this.StateHasChanged();
    }


}


