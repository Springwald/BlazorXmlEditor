@page "/InsertElementDemo"
@using de.springwald.xml.editor
@using de.springwald.xml.editor.actions
@using de.springwald.xml.blazor.demo.DemoData
@using System.Timers
@using de.springwald.xml.blazor.demo.Components
@using de.springwald.xml.rules
@implements IDisposable

<h1>insert element demo</h1>
<FpsCounter @ref="fpsCounter" />
<de.springwald.xml.blazor.Components.XmlEditor EditorContext="this.editorContext" OnReady="this.EditorIsReady" Style="max-height: 500px; height: 500px; width: 100%; min-width: 100%" />

@code {

    private string documentContent = "<category><pattern>A Lorem ipsum dolor sit amet, consetetur sadipscing elitr</pattern><template>Lorem ipsum Dolor sit amet</template></category>";
    private string[] elementNames = new[] { "p" , "star", "br", "img", "table" };

    private FpsCounter fpsCounter;
    private EditorContext editorContext;
    private Timer typingTimer;
    private System.Xml.XmlDocument xmlDocument;
    private System.Xml.XmlNode textNode;
    private Random rnd = new Random();

    protected override async Task OnInitializedAsync()
    {
        var demoDtd = DemoDtd.LoadDemoDtd();
        this.editorContext = new EditorContext(BlazorEditorConfig.StandardConfig, new DemoXmlRules(demoDtd));
        this.xmlDocument = new System.Xml.XmlDocument();
        this.xmlDocument.LoadXml(this.documentContent);
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.typingTimer.Stop();
        this.typingTimer.Elapsed -= TypingTimerEvent;
    }

    private async Task EditorIsReady()
    {
        await this.editorContext.EditorState.SetRootNode(xmlDocument.DocumentElement);
        var patternNode = xmlDocument.DocumentElement.ChildNodes[0];
        var templateNode = xmlDocument.DocumentElement.ChildNodes[1];
        this.textNode = patternNode.ChildNodes[0];
        await this.editorContext.EditorState.CursorRaw.SetBothPositionsAndFireChangedEventIfChanged(
            textNode,
            XmlCursorPos.XmlCursorPositions.CursorInsideTextNode,
            10);
        this.InitTypingTimer();
    }

    private void InitTypingTimer()
    {
        this.typingTimer = new Timer();
        this.typingTimer.Elapsed += TypingTimerEvent;
        this.typingTimer.Interval = 1;
        this.typingTimer.Start();
    }

    private async void TypingTimerEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        this.typingTimer.Stop();

        await this.editorContext.Actions.ActionInsertNewElementAtActCursorPos(
            elementNames[this.rnd.Next(0, this.elementNames.Length)],
            EditorActions.SetUndoSnapshotOptions.Yes,
            setNewCursorPosBehindNewInsertedNode: true);

        this.fpsCounter.Count();
        this.typingTimer.Start();
    }
}
