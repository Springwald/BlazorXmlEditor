@page "/Select2Demo"
@using de.springwald.xml.blazor
@using de.springwald.xml.blazor.demo.DemoData
@using de.springwald.xml.editor
@using System.Timers
@using de.springwald.xml.blazor.demo.Components
@implements IDisposable

<h1>select demo 2</h1>
<FpsCounter @ref="fpsCounter" />
<p>@this.cursorPosStart > @this.cursorPosEnd</p>
<de.springwald.xml.blazor.Components.XmlEditor EditorContext="this.editorContext"  OnReady="this.EditorIsReady" />

@code {
    private string documentContent = "<category><pattern>Lorem ipsum dolor sit amet, consetetur sadipscing elitr Lorem ipsum dolor sit amet, consetetur.</pattern><template>Lorem ipsum Dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr Lorem ipsum dolor sit amet, consetetur.</template></category>";

    private FpsCounter fpsCounter;
    private EditorContext editorContext;
    private System.Xml.XmlDocument xmlDocument;
    private Timer moveTimer;
    private string cursorPosStart;
    private string cursorPosEnd;
    private int step = 0;
    private bool forward = true;

    protected override async Task OnInitializedAsync()
    {
        var demoDtd = DemoDtd.LoadDemoDtd();
        this.editorContext = new EditorContext(BlazorEditorConfig.StandardConfig, new DemoXmlRules(demoDtd));
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.moveTimer.Stop();
        this.moveTimer.Elapsed -= MoveTimerEvent;
    }

    private void EditorIsReady()
    {
        this.moveTimer = new Timer();
        this.moveTimer.Elapsed += MoveTimerEvent;
        this.moveTimer.Interval = 1;
        this.moveTimer.Start();
    }

    private async void MoveTimerEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        this.moveTimer.Stop();

        if (this.xmlDocument == null)
        {
            this.xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(this.documentContent);
            await this.editorContext.EditorState.SetRootNode(xmlDocument.DocumentElement);
            var patternNode = xmlDocument.DocumentElement.ChildNodes[0];
            var templateNode = xmlDocument.DocumentElement.ChildNodes[1];
            var textNode = patternNode.ChildNodes[0];
            await this.editorContext.EditorState.CursorRaw.SetBothPositionsAndFireChangedEventIfChanged(
                textNode,
                rules.XmlCursorPos.XmlCursorPositions.CursorInsideTextNode,
                3);
        }
        var cursorStatus = this.editorContext.EditorState.CursorRaw;

        if (forward)
        {
            step++;
            if (step > 150)
            {
                this.forward = false;
            }

            await this.editorContext.Actions.MoveRight(cursorStatus.EndPos);
        }
        else
        {
            step--;
            if (step == 0)
            {
                this.forward = true;
            }
            await this.editorContext.Actions.MoveLeft(cursorStatus.EndPos);
        }

        this.cursorPosStart = $"{cursorStatus.StartPos.ActualNode.Name}:{cursorStatus.StartPos.PosOnNode}:{cursorStatus.StartPos.PosInTextNode}";
        this.cursorPosEnd = $"{cursorStatus.EndPos.ActualNode.Name}:{cursorStatus.EndPos.PosOnNode}:{cursorStatus.EndPos.PosInTextNode}";
        StateHasChanged();

        this.fpsCounter.Count();
        this.moveTimer.Start();
    }
}
