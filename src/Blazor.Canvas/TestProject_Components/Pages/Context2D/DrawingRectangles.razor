@page "/2D/DrawingRectangles"
<SourceCodeLink Repository="Blazor.Canvas" Section="@nameof(Context2D)" Page="@nameof(DrawingRectangles)" />
<h3>DrawingRectangles</h3>

For more information, please visit <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D">https://developer.mozilla.org/</a>.
<hr />
<Canvas @ref="canvas" width="400" height="400" style="border: 5px solid red" />
<hr />
<ol>
    @if (Messages != null)
    {
        foreach (var message in Messages)
        {
            <li>@message</li>
        }
    }
</ol>

@code {
    private Canvas canvas;
    private List<string> Messages = new List<string>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await UpdateCanvasAsync();
        await base.OnAfterRenderAsync(firstRender);
    }
    private async Task UpdateCanvasAsync()
    {
        var messages = new List<string>();
        await using (var ctx = await canvas.GetContext2DAsync())
        {
            await ctx.ClearRectAsync(0, 0, 400, 400);
            await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
            await ctx.RestoreAsync();
            await ctx.SaveAsync();
            messages.Add("Cleared");
            await ctx.FillTextAsync("Hello", 0, 100);
            messages.Add("Wrote hello");
            await ctx.FillTextAsync("canvas", 100, 10);
            messages.Add("Wrote canvas");
            await ctx.FillRectAsync(100, 100, 100, 100);
            messages.Add("Filled rectangle");
            await ctx.StrokeRectAsync(210, 100, 100, 100);
            messages.Add("Stroked rectangle");
            Messages = messages;
        }
    }
}