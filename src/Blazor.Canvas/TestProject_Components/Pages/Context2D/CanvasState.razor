@page "/2D/CanvasState"
<SourceCodeLink Repository="Blazor.Canvas" Section="@nameof(Context2D)" Page="@nameof(CanvasState)" />
<h3>CanvasState</h3>

For more information, please visit <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D">https://developer.mozilla.org/</a>.
<hr />
<Canvas @ref="canvas" width="400" height="400" style="border: 5px solid red" />
<hr />
<ul>
    <li>
        <label for="rotate">Restore</label>
        <input id="rotate" type="checkbox" @bind-value="@Restore" />
    </li>
</ul>

<ol>
    @if (Messages != null)
    {
        foreach (var message in Messages)
        {
            <li>@message</li>
        }
    }
</ol>

@code {
    private Canvas canvas;
    private List<string> Messages = new List<string>();
    private bool Restore { get; set; }
    private bool[] last_render = new bool[] { true };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var current_state = new bool[] { Restore };
        if (!current_state.SequenceEqual(last_render))
        {
            last_render = current_state;
            await UpdateCanvasAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private async Task UpdateCanvasAsync()
    {
        Messages.Clear();
        await using (var ctx = await canvas.GetContext2DAsync())
        {
            await ctx.ClearRectAsync(0, 0, 400, 400);
            await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
            await ctx.RestoreAsync();
            await ctx.JS.restore();
            await ctx.JS.save();
            Messages.Add("Cleared");
            await ctx.SaveAsync();
            Messages.Add("State saved");
            await ctx.FillTextAsync("Hello", 0, 100);
            Messages.Add("Wrote hello");
            await ctx.FillStyleAsync("green");
            await ctx.StrokeStyleAsync("green");
            await ctx.FontAsync("48px serif");
            Messages.Add("Set fill/stroke style to green and increased font size");
            if (Restore)
            {
                await ctx.RestoreAsync();
                Messages.Add("Restored state");
            }
            await ctx.FillTextAsync("canvas", 100, 40);
            Messages.Add("Wrote canvas");
            if (!Restore)
            {
                await ctx.RestoreAsync();
            }
            Messages = Messages.ToList();
            await InvokeAsync(StateHasChanged);
        }
    }
}
