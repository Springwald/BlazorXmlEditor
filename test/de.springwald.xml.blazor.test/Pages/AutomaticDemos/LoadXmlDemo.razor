@page "/LoadXmlDemo"
@using de.springwald.xml.blazor
@using de.springwald.xml.editor
@using de.springwald.xml.blazor.test.DemoData
@using System.Timers
@using de.springwald.xml.blazor.test.Components
@implements IDisposable

<h1>load xml demo</h1>
<h2>loading document @this.actualDocumentIndex</h2>
<FpsCounter @ref="fpsCounter" />

<de.springwald.xml.blazor.Components.XmlEditor EditorContext="this.editorContext" OnReady="this.OnEditorReady" />

@code {

    private string[] documents = new[] {
        "<category><pattern>Demo text no 1</pattern><template>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.</template></category>",
        "<category><pattern>Demo text no 2</pattern><template>At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</template></category>"};

    private FpsCounter fpsCounter;
    private EditorContext editorContext;
    private Timer loadDocumentTimer;
    private int actualDocumentIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        var demoDtd = DemoDtd.LoadDemoDtd();
        this.editorContext = new EditorContext(BlazorEditorConfig.StandardConfig, new DemoXmlRules(demoDtd));
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.loadDocumentTimer.Stop();
        this.loadDocumentTimer.Elapsed -= LoadDocumentTimedEvent;
    }

    private void OnEditorReady()
    {
        this.loadDocumentTimer = new Timer();
        this.loadDocumentTimer.Elapsed += LoadDocumentTimedEvent;
        this.loadDocumentTimer.Interval = 1;
        this.loadDocumentTimer.Start();
    }

    private async void LoadDocumentTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        this.loadDocumentTimer.Stop();

        this.IncrementDocumentIndex();
        var xmlDocument = new System.Xml.XmlDocument();
        xmlDocument.LoadXml(this.documents[this.actualDocumentIndex]);
        await this.editorContext.EditorState.SetRootNode(xmlDocument.DocumentElement);

        this.loadDocumentTimer.Start();
    }

    protected void IncrementDocumentIndex()
    {
        this.fpsCounter.Count();
        this.actualDocumentIndex++;
        if (this.actualDocumentIndex >= this.documents.Length) this.actualDocumentIndex = 0;
    }
}
