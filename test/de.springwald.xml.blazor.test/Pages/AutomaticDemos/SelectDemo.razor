@page "/SelectDemo"
@using de.springwald.xml.blazor.Components
@using de.springwald.xml.blazor
@using de.springwald.xml.blazor.test.DemoData
@using System.Timers
@using de.springwald.xml.blazor.test.Components
@implements IDisposable

<h1>select demo</h1>
<FpsCounter @ref="fpsCounter" />

<de.springwald.xml.blazor.Components.XmlEditor @ref="xmlEditor" EditorContext="this.editorContext" />

@code {
    private FpsCounter fpsCounter;
    private XmlEditor xmlEditor;
    private XmlEditorContext editorContext = new XmlEditorContext();

    private Timer selectTimer;
    private string documentContent = "<category><pattern>Demo text</pattern><template>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.</template></category>";
    private System.Xml.XmlDocument xmlDocument;

    protected override async Task OnInitializedAsync()
    {
        var demoDtd = DemoDtd.LoadDemoDtd();
        this.editorContext.XmlRules = new DemoXmlRegelwerk(demoDtd);

        this.selectTimer = new Timer();
        this.selectTimer.Elapsed += LoadDocumentTimedEvent;
        this.selectTimer.Interval = 10;
        this.selectTimer.Start();

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.selectTimer.Stop();
        this.selectTimer.Elapsed -= LoadDocumentTimedEvent;
    }

    public bool flipFlop;

    private async void LoadDocumentTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        this.selectTimer.Stop();

        if (this.xmlDocument == null)
        {
            this.xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(this.documentContent);
            await this.editorContext.SetRootNode(xmlDocument.DocumentElement);
        }

        var patternNode = xmlDocument.DocumentElement.ChildNodes[0];
        var templateNode = xmlDocument.DocumentElement.ChildNodes[1];
        var textNode = patternNode.ChildNodes[0];

        flipFlop = !flipFlop;
        if (flipFlop)
        {
            await this.xmlEditor.Editor.CursorRoh.BeideCursorPosSetzenMitChangeEventWennGeaendert(
                            patternNode,
                            cursor.XMLCursorPositionen.CursorAufNodeSelbstVorderesTag);
        }
        else
        {
            await this.xmlEditor.Editor.CursorRoh.BeideCursorPosSetzenMitChangeEventWennGeaendert(
                            templateNode,
                            cursor.XMLCursorPositionen.CursorAufNodeSelbstVorderesTag);
        }
        this.fpsCounter.Count();
        this.selectTimer.Start();
    }
}
