@page "/MoveCursorDemo"
@using de.springwald.xml.blazor.Components
@using de.springwald.xml.blazor
@using de.springwald.xml.editor
@using de.springwald.xml.blazor.test.DemoData
@using System.Timers
@using de.springwald.xml.blazor.test.Components
@implements IDisposable

<h1>move cursor demo</h1>
<FpsCounter @ref="fpsCounter" />
<p>@this.cursorPos</p>
<de.springwald.xml.blazor.Components.XmlEditor @ref="xmlEditor" EditorContext="this.editorContext" />


@code {

    private XmlEditor xmlEditor;
    private FpsCounter fpsCounter;
    private XmlEditorContext editorContext = new XmlEditorContext();

    private string documentContent = "<category><pattern id=\"test\" id2=\"test2\">Lorem ipsum dolor sit amet, consetetur sadipscing elitr Lorem ipsum dolor sit amet, consetetur</pattern><template>Lorem ipsum Dolor sit amet</template><template id=\"test2\" id2=\"LOREM ipsum Dolor Sit Amet lorem ipsum Dolor sit amet\">lorem ipsum dolor sit amet lorem ipsum dolor sit amet</template><template id=\"1\"></template></category>";

    private Timer moveTimer;
    private int actualDocumentIndex = 0;
    private System.Xml.XmlDocument xmlDocument;
    private string cursorPos;

    protected override async Task OnInitializedAsync()
    {
        var demoDtd = DemoDtd.LoadDemoDtd();
        this.editorContext.XmlRules = new DemoXmlRegelwerk(demoDtd);
        this.moveTimer = new Timer();
        this.moveTimer.Elapsed += MoveTimerEvent;
        this.moveTimer.Interval = 1;
        this.moveTimer.Start();
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.moveTimer.Stop();
        this.moveTimer.Elapsed -= MoveTimerEvent;
    }

    private int typingPos = 0;

    private int step = 0;
    private bool forward = true;

    private async void MoveTimerEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        this.moveTimer.Stop();

        if (this.xmlDocument == null)
        {
            this.xmlDocument = new System.Xml.XmlDocument();
            xmlDocument.LoadXml(this.documentContent);
            await this.editorContext.EditorStatus.SetRootNode(xmlDocument.DocumentElement);
            await this.xmlEditor.Editor.EditorStatus.CursorRoh.BeideCursorPosSetzenMitChangeEventWennGeaendert(
               xmlDocument.DocumentElement,
               cursor.XMLCursorPositionen.CursorVorDemNode,
               0);
        }

        var cursorStatus = this.xmlEditor.Editor.EditorStatus.CursorRoh;

        if (forward)
        {
            step++;
            if (step > 150)
            {
                this.forward = false;
            }

            var dummy = cursorStatus.StartPos.Clone();
            await dummy.MoveRight(xmlDocument.DocumentElement, this.editorContext.XmlRules);
            await cursorStatus.BeideCursorPosSetzenMitChangeEventWennGeaendert(dummy.AktNode, dummy.PosAmNode, dummy.PosImTextnode);
        }
        else
        {
            step--;
            if (step == 0)
            {
                this.forward = true;
            }
            var dummy = cursorStatus.StartPos.Clone();
            await dummy.MoveLeft(xmlDocument.DocumentElement, this.editorContext.XmlRules);
            await cursorStatus.BeideCursorPosSetzenMitChangeEventWennGeaendert(dummy.AktNode, dummy.PosAmNode, dummy.PosImTextnode);
        }

        this.cursorPos = $"{cursorStatus.StartPos.AktNode.Name}:{cursorStatus.StartPos.PosAmNode}:{cursorStatus.StartPos.PosImTextnode}";
        StateHasChanged();

        this.fpsCounter.Count();
        this.moveTimer.Start();
    }
}
