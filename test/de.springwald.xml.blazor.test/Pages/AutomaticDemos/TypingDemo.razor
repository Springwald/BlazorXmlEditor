@page "/TypingDemo"
@using de.springwald.xml.editor
@using de.springwald.xml.editor.actions
@using de.springwald.xml.blazor.test.DemoData
@using System.Timers
@using de.springwald.xml.blazor.test.Components
@implements IDisposable

<h1>typing demo</h1>
<FpsCounter @ref="fpsCounter" />
<de.springwald.xml.blazor.Components.XmlEditor EditorContext="this.editorContext" OnReady="this.EditorIsReady" />

@code {

    private string documentContent = "<category><pattern id=\"test\" id2=\"test2\">A Lorem ipsum dolor sit amet, consetetur sadipscing elitr</pattern><pattern id=\"test\" id2=\"test2\">A Lorem ipsum dolor sit amet, consetetur sadipscing elitr</pattern><template>Lorem ipsum Dolor sit amet</template><template id=\"test2\" id2=\"LOREM ipsum Dolor Sit Amet lorem ipsum Dolor sit amet\">lorem ipsum dolor sit amet <star/> lorem ipsum dolor sit amet</template><template id=\"1\"></template></category>";
    private const string LoremIpsum = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.";

    private FpsCounter fpsCounter;
    private EditorContext editorContext;
    private Timer typingTimer;
    private int typingPos = 0;
    private System.Xml.XmlDocument xmlDocument;
    private System.Xml.XmlNode textNode;

    protected override async Task OnInitializedAsync()
    {
        var demoDtd = DemoDtd.LoadDemoDtd();
        this.editorContext = new EditorContext(BlazorEditorConfig.StandardConfig, new DemoXmlRules(demoDtd));
        this.xmlDocument = new System.Xml.XmlDocument();
        this.xmlDocument.LoadXml(this.documentContent);
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        this.typingTimer.Stop();
        this.typingTimer.Elapsed -= TypingTimerEvent;
    }

    private async Task EditorIsReady()
    {
        await this.editorContext.EditorState.SetRootNode(xmlDocument.DocumentElement);
        var patternNode = xmlDocument.DocumentElement.ChildNodes[0];
        var templateNode = xmlDocument.DocumentElement.ChildNodes[1];
        this.textNode = patternNode.ChildNodes[0];
        this.InitTypingTimer();
    }

    private void InitTypingTimer()
    {
        this.typingTimer = new Timer();
        this.typingTimer.Elapsed += TypingTimerEvent;
        this.typingTimer.Interval = 1;
        this.typingTimer.Start();
    }

    private async void TypingTimerEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        this.typingTimer.Stop();

        this.typingPos++;
        if (this.typingPos >= LoremIpsum.Length) this.typingPos = 0;

        await this.editorContext.EditorState.CursorRaw.SetBothPositionsAndFireChangedEventIfChanged(
                textNode,
                rules.XmlCursorPos.XmlCursorPositions.CursorInsideTextNode,
                textNode.InnerText.Length);
        await this.editorContext.Actions.ActionInsertTextAtCursorPos(LoremIpsum[this.typingPos].ToString(), EditorActions.SetUndoSnapshotOptions.Yes);

        this.fpsCounter.Count();
        this.typingTimer.Start();
    }
}
