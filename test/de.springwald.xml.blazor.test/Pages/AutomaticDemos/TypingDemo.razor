@page "/TypingDemo"
@using de.springwald.xml.blazor.Components
@using de.springwald.xml.blazor
@using de.springwald.xml.blazor.test.DemoData
@using System.Timers
@using de.springwald.xml.blazor.test.Components
@implements IDisposable

<h1>typing demo</h1>
<FpsCounter @ref="fpsCounter" />
<de.springwald.xml.blazor.Components.XmlEditor @ref="xmlEditor" EditorContext="this.editorContext" />

@code {

    private XmlEditor xmlEditor;
    private FpsCounter fpsCounter;
    private XmlEditorContext editorContext = new XmlEditorContext();

    private string documentContent = "<category><pattern id=\"test\" id2=\"test2\">A Lorem ipsum dolor sit amet, consetetur sadipscing elitr</pattern><pattern id=\"test\" id2=\"test2\">A Lorem ipsum dolor sit amet, consetetur sadipscing elitr</pattern><template>Lorem ipsum Dolor sit amet</template><template id=\"test2\" id2=\"LOREM ipsum Dolor Sit Amet lorem ipsum Dolor sit amet\">lorem ipsum dolor sit amet <star/> lorem ipsum dolor sit amet</template><template id=\"1\"></template></category>";
    private const string LoremIpsum = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.";

    private Timer typingTimer;
    private int actualDocumentIndex = 0;
    private System.Xml.XmlDocument xmlDocument;

    private int typingPos = 0;
    private System.Xml.XmlNode textNode;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.LoadXml();
            await this.InitTypingTimer();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        this.typingTimer.Stop();
        this.typingTimer.Elapsed -= TypingTimerEvent;
    }

    private void LoadXml()
    {
        var demoDtd = DemoDtd.LoadDemoDtd();
        this.editorContext.XmlRules = new DemoXmlRegelwerk(demoDtd);
        this.xmlDocument = new System.Xml.XmlDocument();
        xmlDocument.LoadXml(this.documentContent);
    }

    private async Task InitTypingTimer()
    {
        await Task.Delay(100);
        await this.editorContext.EditorStatus.SetRootNode(xmlDocument.DocumentElement);
        var patternNode = xmlDocument.DocumentElement.ChildNodes[0];
        var templateNode = xmlDocument.DocumentElement.ChildNodes[1];
        this.textNode = patternNode.ChildNodes[0];

        this.typingTimer = new Timer();
        this.typingTimer.Elapsed += TypingTimerEvent;
        this.typingTimer.Interval = 1;
        this.typingTimer.Start();
    }

    private async void TypingTimerEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        this.typingTimer.Stop();

        this.typingPos++;
        if (this.typingPos >= LoremIpsum.Length) this.typingPos = 0;

        await this.xmlEditor.Editor.EditorStatus.CursorRoh.BeideCursorPosSetzenMitChangeEventWennGeaendert(
                textNode,
                cursor.XMLCursorPositionen.CursorInnerhalbDesTextNodes,
                textNode.InnerText.Length);
        await this.xmlEditor.Editor.EditorActions.AktionTextAnCursorPosEinfuegen(LoremIpsum[this.typingPos].ToString(), editor.editor.EditorActions.UndoSnapshotSetzenOptionen.ja);

        this.fpsCounter.Count();

        this.actualDocumentIndex++;

        this.typingTimer.Start();
    }
}
